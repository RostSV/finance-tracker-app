openapi: 3.0.0

servers:
  - url: /api/v1

info:
  title: Money Mate
  version: 1.0.0
  description: API for finance management system based on OpenAPI 3.0 specification.
  contact:
    name: the developer
    email: rostyslav.svistula@gmail.com

tags:
  - name: Account
    description: Operations about account
  - name: Transaction
    description: Operations about transaction
  - name: Category
    description: Operations about category

paths:
  /accounts:
    get:
      tags:
        - Account
      summary: Get all user's accounts
      description: Returns a list that contains all user accounts
      operationId: listAccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'

    post:
      tags:
        - Account
      summary: Add a new finance account
      description: Account object that need to be created and assigned to user
      operationId: createAccount

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'

      responses:
        '201':
          description: Account was created successfully
        '400':
          description: Invalid input parameters
        '409':
          description: Account with the same name already exists
    put:
      tags:
        - Account
      summary: Update an existing account
      operationId: updateAccount

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: Account updated successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Account not found

  /accounts/{accountId}:
    get:
      tags:
        - Account
      summary: Get an account by ID
      operationId: getAccount

      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the account to get
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found

    delete:
      tags:
        - Account
      summary: Delete an account by ID
      operationId: deleteAccount

      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the account to delete
      responses:
        '204':
          description: Account deleted successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Account not found

  /accounts/transactions:

    get:
      tags:
        - Transaction
      summary: Get all user's transactions
      description: Return all transactions from every account as list
      operationId: listTransactions

      parameters:
        - in: query
          name: days
          required: true
          schema:
            type: integer
            format: int32
          description: The numbers of days to get transaction from



      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'

  /accounts/{accountId}/transactions:
    get:
      tags:
        - Transaction
      summary: Get all transactions of account specified by ID
      description: Return all transactions from the specific account as list
      operationId: listTransactionsByAccount

      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of account to get its transactions
        - name: days
          in: query
          required: true
          schema:
            type: integer
            format: int32
            description: The numbers of days to get transaction from

      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'



    post:
      tags:
        - Transaction
      summary: Add new transaction to specific account
      description: Create transaction and assign it to the specific account
      operationId: addTransaction

      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of account to add transaction to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction added succesfully
        '400':
          description: Invalid input
        '404':
          description: Account not found
    put:
      tags:
        - Transaction
      summary: Update an existing transaction of account specified by ID
      operationId: updateTransaction

      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric ID of the account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Transaction updated successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Transaction not found

  /accounts/{accountId}/transactions/{transactionId}:
    delete:
      tags:
        - Transaction
      summary: Delete transaction by ID
      operationId: deleteTransactionById

      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the account
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the transaction to delete
      responses:
        '204':
          description: Transaction deleted successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Transaction not found


  /categories:
    get:
      tags:
        - Category
      summary: Get categories specified by user
      operationId: listCategories

      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Create a new category
      operationId: createCategory
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'

      responses:
        '201':
          description: Category was created successfully
        '400':
          description: Invalid input parameters
        '409':
          description: Category with the same name already exists
    put:
      tags:
        - Category
      summary: Update existing category
      operationId: updateCategory

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Category not found


  /categories/{categoryId}:
    delete:
      tags:
        - Category
      summary: Delete a category by ID
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of category to delete
      responses:
        '204':
          description: Category deleted successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Category not found

  /users:
    post:
      tags:
        - User
      summary: Add new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Invalid input parameters
        '409':
          description: User with the same email already exists

    get:
      tags:
        - User
      summary: Get all users
      description: Available only with ADMIN role.
      operationId: listUsers

      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Request denied. Lack of permission.

  /currencies:
    post:
      tags:
        - Currency
      summary: Add new currency
      description: Only ADMIN can add currency
      operationId: createCurrency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
      responses:
        '201':
          description: Currency created successfully.
        '400':
          description: Invalid input parameters.
        '403':
          description: Request denied. Lack of permission.
        '409':
          description: Currency already exists.

    get:
      tags:
        - Currency
      summary: Get all currencies
      operationId: listCurrencies

      responses:
        '200':
          description: List of currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'



components:
  schemas:
    Account:
      type: object
      required:
        - name
        - balance
        - type
        - createdBy
        - currency
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the account.
        name:
          type: string
          description: Name of the account. e.g. "MyAccount"
        description:
          type: string
          description: Description of the account
        balance:
          type: number
          description: Current balance of the account
        type:
          $ref: '#/components/schemas/AccountType'
        currency:
          $ref: '#/components/schemas/Currency'
        createdBy:
          $ref: '#/components/schemas/User'


    AccountType:
      type: string
      enum:
        - PERSONAL
        - SAVINGS
        - CUSTOM

    User:
      type: object
      required:
        - email
        - role
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user.
        email:
          type: string
          description: Email address of the user.
        role:
          $ref: '#/components/schemas/UserRole'
        name:
          type: string

    UserRole:
      type: string
      enum:
        - USER
        - ADMIN


    Transaction:
      type: object
      required:
        - amount
        - category
        - type
        - currency
        - accountId
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the transaction.
        createdOn:
          type: string
          format: date-time
          description: Date and time when transaction was added in UTC.
        amount:
          type: number
          description: Amount of the transaction.
        description:
          type: string
          description: Description of the transaction.
        category:
          $ref: '#/components/schemas/Category'
        type:
          $ref: '#/components/schemas/TransactionType'
        currency:
          $ref: '#/components/schemas/Currency'
        assignedTo:
          $ref: '#/components/schemas/Account'

    TransactionType:
      type: string
      enum:
        - INCOME
        - EXPENSE

    Currency:
      type: object
      required:
        - code
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the Currency.
        name:
          type: string
          description: Name of the Currency
        code:
          type: string
          description: Currency code by ISO 4217
        sign:
          type: string
          description: Currency sign(e.g. '$')

    Category:
      type: object
      required:
        - name
        - assignedUser
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Name og the category. e.g "Shopping"
        description:
          type: string
          description: More specific of the category. e.g. "New clothes"
        assignedUser:
          $ref: '#/components/schemas/User'




