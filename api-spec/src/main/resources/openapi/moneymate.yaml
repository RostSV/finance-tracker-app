openapi: 3.0.0
info:
  title: Money Mate
  version: 1.0.0
  description: API for finance management system
  contact:
    name: API Support
    email: rostyslav.svistula@gmail.com

servers:
  - url: http://localhost:8081/v1

paths:
  /accounts:
    get:
      summary: Return a list of all user's accounts
      operationId: listAccounts
      tags:
        - Account
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
    
    post:
      summary: Create a new account
      operationId: createAccount
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      
      responses:
        '201':
          description: Account was created succesfully
        '400':
          description: Inavlid input parameters
        '409':
          description: Account with the same name already exists
  
  /accounts/{id}:
    delete:
      summary: Delete an account by ID
      operationId: deleteAccount
      tags:
        - Account
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of user to delete
      responses:
        '204':
          description: Account deleted successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Account not found
    
    put:
      summary: Update an account by ID
      operationId: updateAccount
      tags:
        - Account
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric ID of the account to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: Account updated successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Account not found
  
  /accounts/transactions:
    get:
      summary: Return a list of all user's transactions
      operationId: listTransactions
      tags:
        - Transaction
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
  
  /accounts/{id}/transactions:
    get:
      summary: Return a list of all transactions by specific account
      operationId: listTransactionsByAccount
      tags:
        - Transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of account to get it's transactions
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    
    
    
    post:
      summary: Add an transaction to specific account
      operationId: addTransactions
      tags:
        - Transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of account to add transaction to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction added succesfully
        '400':
          description: Invalid input
  
  /accounts/{id}/transactions/{tr_id}:
    delete:
      summary: Delete an account transaction by ID
      operationId: deleteTransactionById
      tags:
        - Transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the account
        - name: tr_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the transaction
      responses:
        '204':
          description: Transaction deleted successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Transaction not found
    
    put:
      summary: Update an account by ID
      operationId: updateTransaction
      tags:
        - Transaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the account
        - name: tr_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            description: Numeric id of the transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Transaction updated successfully
        '400':
          description: Invalid input parameters
        '404':
          description: Transaction not found
  
  /categories:
    get:
      summary: Return a list of user categories
      operationId: listCategories
      tags:
        - Category
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    
    post:
      summary: Create a new category
      operationId: createCategory
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      
      responses:
        '201':
          description: Category was created successfully
        '400':
          description: Invalid input parameters
        '409':
          description: Category with the same name already exists



components:
  schemas:
    Account:
      type: object
      required:
        - name
        - balance
        - type
        - createdBy
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the account.
        name:
          type: string
          description: Name of the account.
        description:
          type: string
          description: Description of the account
        balance:
          type: number
          description: Current balance of the account
        type:
          $ref: '#/components/schemas/AccountType'
        createdBy:
          $ref: '#/components/schemas/User'
        currency:
          $ref: '#/components/schemas/Currency'
      example:
        id: 5
        name: My account
        description: Just regular account
        balance: 150
        type: "PERSONAL"
        createdBy: {
          id: 123,
          email: "user@example.com"
        }
        currency: {
          code: "USD",
          sign: "$",
          name: "US Dollar"
        }
    
    
    AccountType:
      type: string
      enum:
        - PERSONAL
        - SAVING
        - CUSTOM
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the user.
        email:
          type: string
          description: Email address of the user.
        profile:
          $ref: '#/components/schemas/Profile'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          description: List of categories associated with the user.
    
    
    Transaction:
      type: object
      required:
        - category
        - amount
        - description
        - type
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the transaction.
        date:
          type: string
          description: Date when transaction was added.
        type:
          $ref: '#/components/schemas/TransactionType'
        category:
          $ref: '#/components/schemas/Category'
        amount:
          type: number
          description: Amount of the transaction.
        description:
          type: string
          description: Description of the transaction.
        accountId:
          type: integer
          format: int64
          description: Id of account that belongs to
      example:
        id: 1
        date: "2024-03-24T19:01:30"
        type: "EXPENSE"
        category: "Shopping"
        amount: 50.25
        description: "Grocery in Kaufland"
        accountId: 123
    
    TransactionType:
      type: string
      enum:
        - INCOME
        - EXPENSE
    
    
    
    Currency:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
          description: Currency code by ISO 4217
        sign:
          type: string
          description: Currency sign(e.g. '$')
        name:
          type: string
          description: Name of the Currency
    
    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      example:
        id: 1
        name: Shopping
        description: Kaufland
    
    
    
    Profile:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        date:
          type: string
          description: Date and time when created